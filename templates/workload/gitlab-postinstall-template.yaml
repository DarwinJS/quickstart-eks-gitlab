AWSTemplateFormatVersion: 2010-09-09
Description: Performs Gitlab post-install configuration. (qs-1rpegts4t)

Metadata:
  cfn-lint: { config: { ignore_checks: [W9002, W9003, W9004] } }

Parameters:
  ClusterName:
    Type: String
  HelmChartNamespace:
    Type: String
  HelmChartName:
    Type: String
  DomainName:
    Type: String
  HostedZoneId:
    Type: String
  PrivateHostedZoneId:
    Type: String
  EnvironmentName:
    Type: String
  ConfigureGrafana:
    Type: String
    AllowedValues: ['Yes', 'No']

Conditions:
  RegisterDns: !Not [!Equals [!Ref HostedZoneId, '']]
  ConfigureGrafana: !Equals [!Ref ConfigureGrafana, 'Yes']

Resources:

  # 0. Retrieve value of rails secret and store it in Secrets Manager
  RailsSecretQuery:
    Type: AWSQS::Kubernetes::Get
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: !Ref HelmChartNamespace
      Name: !Sub secret/${HelmChartName}-rails-secret
      JsonPath: '{.data}'
      Retries: 3
  RailsSecret:
    Type: AWS::SecretsManager::Secret
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      Name: !Sub /quickstart/gitlab/${EnvironmentName}/secrets/rails
      Description: GitLab Rails Secret
      SecretString: !GetAtt RailsSecretQuery.Response

  # 1. Retrieve value of root password secret and store it in Secrets Manager
  InitialRootPasswordQuery:
    Type: AWSQS::Kubernetes::Get
    # Dependency to ensure queries are not executed in parallel - seen some errors when they run concurrently
    DependsOn: RailsSecretQuery
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: !Ref HelmChartNamespace
      Name: !Sub secret/${HelmChartName}-gitlab-initial-root-password
      JsonPath: '{.data.password}'
      Retries: 3
  InitialRootPasswordSecret:
    Type: AWS::SecretsManager::Secret
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      Name: !Sub /quickstart/gitlab/${EnvironmentName}/secrets/initial-root-password
      Description: GitLab Initial Root Password
      SecretString: !GetAtt InitialRootPasswordQuery.Response

  # 2. Retrieve load balancer URL and store as SSM parameter
  LoadBalancerQuery:
    Type: AWSQS::Kubernetes::Get
    # Dependency to ensure queries are not executed in parallel - seen some errors when they run concurrently
    DependsOn: InitialRootPasswordQuery
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: !Ref HelmChartNamespace
      Name: !Sub service/${HelmChartName}-nginx-ingress-controller
      JsonPath: '{.status.loadBalancer.ingress[0].hostname}'
      Retries: 3
  InternalLoadBalancerQuery:
    Type: AWSQS::Kubernetes::Get
    # Dependency to ensure queries are not executed in parallel - seen some errors when they run concurrently
    DependsOn: LoadBalancerQuery
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: !Ref HelmChartNamespace
      Name: !Sub service/${HelmChartName}-nginx-ingress-controller-internal
      JsonPath: '{.status.loadBalancer.ingress[0].hostname}'
      Retries: 3
  LoadBalancerParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /quickstart/gitlab/${EnvironmentName}/loadbalancer
      Description: GitLab load balancer hostname
      Value: !GetAtt LoadBalancerQuery.Response

  # 3. Retrieve TLS CA base64-encoded string and store as SSM parameter
  RootCAQuery:
    Type: AWSQS::Kubernetes::Get
    # Dependency to ensure queries are not executed in parallel - seen some errors when they run concurrently
    DependsOn: InternalLoadBalancerQuery
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: !Ref HelmChartNamespace
      Name: !Sub secret/${HelmChartName}-wildcard-tls-ca
      JsonPath: '{.data.cfssl_ca}'
      Retries: 3
  RootCAParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /quickstart/gitlab/${EnvironmentName}/infra/tls-ca
      Description: GitLab TLS CA
      Value: !GetAtt RootCAQuery.Response

  # 4. If Grafana integration enabled - retrieve value of Grafana password and store it in Secrets Manager
  InitialGrafanaPasswordQuery:
    Type: AWSQS::Kubernetes::Get
    Condition: ConfigureGrafana
    # Dependency to ensure queries are not executed in parallel - seen some errors when they run concurrently
    DependsOn: RootCAQuery
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: !Ref HelmChartNamespace
      Name: !Sub secret/${HelmChartName}-grafana-initial-password
      JsonPath: '{.data.password}'
      Retries: 3
  InitialGrafanaPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Condition: ConfigureGrafana
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      Name: !Sub /quickstart/gitlab/${EnvironmentName}/secrets/initial-grafana-password
      Description: Grafana Initial Root Password
      SecretString: !GetAtt InitialGrafanaPasswordQuery.Response

  # 5. Add DNS records to enable routing to GitLab
  GitLabPrivateDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZoneId
      Comment: DNS name for GitLab Web service.
      Name: !Sub gitlab.${DomainName}
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !GetAtt InternalLoadBalancerQuery.Response
  GitLabDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: RegisterDns
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: DNS name for GitLab Web service.
      Name: !Sub gitlab.${DomainName}
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !GetAtt LoadBalancerQuery.Response
  RegistryPrivateDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZoneId
      Comment: DNS name for GitLab Registry service.
      Name: !Sub registry.${DomainName}
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !GetAtt InternalLoadBalancerQuery.Response
  RegistryDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: RegisterDns
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: DNS name for GitLab Registry service.
      Name: !Sub registry.${DomainName}
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !GetAtt LoadBalancerQuery.Response
  KASPrivateDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZoneId
      Comment: DNS name for GitLab Web service.
      Name: !Sub kas.${DomainName}
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !GetAtt InternalLoadBalancerQuery.Response
  KASDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: RegisterDns
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: DNS name for GitLab Web service.
      Name: !Sub kas.${DomainName}
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !GetAtt LoadBalancerQuery.Response

  # 4. Store cluster name as SSM parameter
  ClusterNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /quickstart/gitlab/${EnvironmentName}/cluster/name
      Value: !Ref ClusterName

Outputs:
  RootCA:
    Value: !GetAtt RootCAQuery.Response
  RootCAChainSecretName:
    Value: !Sub ${HelmChartName}-wildcard-tls-chain
