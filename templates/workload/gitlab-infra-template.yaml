AWSTemplateFormatVersion: 2010-09-09
Description: Deploys GitLab infrastructure resources (qs-1rpegts4g)

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W9002
        - W9003
        - W9004
        - E0002

Parameters:
  VPCID: 
    Type: 'AWS::EC2::VPC::Id'
  DBPort:
    Type: Number
    MinValue: 1150
    MaxValue: 65535
  DBAccessCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    Type: String
  PraefectPort:
    Type: Number
    MinValue: 1150
    MaxValue: 65535

  DomainName:
    Type: String
  CreateHostedZone:
    Type: String
    AllowedValues: ["Yes", "No"]
  CreateEmailDomain:
    Type: String
    AllowedValues: ["Yes", "No"]
  CreateSslCertificate:
    Type: String
    AllowedValues: ["Yes", "No"]

  FunctionsBucketName:
    Type: String
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$

  QSS3BucketName:
    Type: String
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
  QSS3BucketRegion:
    Type: String
  QSS3KeyPrefix:
    Type: String
    AllowedPattern: ^[0-9a-zA-Z-/]*$

  EnvironmentName:
    Type: String    

Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  HostedZoneRequested: !Equals  [!Ref CreateHostedZone, 'Yes']
  EmailDomainRequested: !And
    - !Equals [!Ref CreateEmailDomain, 'Yes']
    - !Condition HostedZoneRequested
  CertificateRequested: !And
    - !Equals [!Ref CreateSslCertificate, 'Yes']
    - !Condition HostedZoneRequested

Resources:

# 0. Database security groups

  PraefectSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'Allow access to database port'
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: '-1'
          ToPort: -1
      SecurityGroupIngress:
        - CidrIp: !Ref DBAccessCIDR 
          FromPort: !Ref PraefectPort
          ToPort: !Ref PraefectPort          
          IpProtocol: tcp
      VpcId: !Ref VPCID
  PraefectSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt PraefectSecurityGroup.GroupId
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref PraefectSecurityGroup
      Description: 'Self Reference'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'Allow access to database port'
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: '-1'
          ToPort: -1
      SecurityGroupIngress: 
        - CidrIp: !Ref DBAccessCIDR 
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          IpProtocol: tcp
      VpcId: !Ref VPCID
      Tags:
      - Key: Name
        Value: !Sub RDSSecurityGroup-${AWS::StackName}
  RDSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt DatabaseSecurityGroup.GroupId
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref DatabaseSecurityGroup
      Description: 'Self Reference'

# 1. Create a new hosted zone for subdomain
  HostedZone: 
    Type: AWS::Route53::HostedZone
    Condition: HostedZoneRequested
    Properties: 
      Name: !Sub "${DomainName}."
  # Always create private hosted zone, even if public is not requested
  PrivateHostedZone: 
    Type: AWS::Route53::HostedZone
    Properties: 
      Name: !Sub "${DomainName}."
      VPCs:
        - VPCId: !Ref VPCID
          VPCRegion: !Ref 'AWS::Region'

# 2. Request ACM certificate for the domain
  SslCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CertificateRequested 
    Properties:
      DomainName: !Sub "*.${DomainName}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub "*.${DomainName}"
          HostedZoneId: !Ref HostedZone


  CleanupACMDNSValidationLambdaRole:
    Type: AWS::IAM::Role
    Condition: CertificateRequested
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeLambdaExecutionRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        # (allows logging)
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - acm:DescribeCertificate
                Resource: !Ref SslCertificate
              - Effect: Allow
                Action:
                  - route53:ListResourceRecordSets
                  - route53:ChangeResourceRecordSets
                Resource: !Sub
                  - "arn:${AWS::Partition}:route53:::hostedzone/${HostedZoneID}"
                  - HostedZoneID: !Ref HostedZone

  CleanupACMDNSValidationLambdaFunction:
    Type: AWS::Lambda::Function
    Condition: CertificateRequested
    Properties:
      Handler: handler.handler
      Runtime: python3.8
      Role: !GetAtt CleanupACMDNSValidationLambdaRole.Arn
      Code:
        S3Bucket: !Ref FunctionsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CleanupACMDNSValidation/lambda.zip'

  CleanupACMDNSValidation:
    Condition: CertificateRequested
    Type: Custom::CleanupACMDNSValidation
    Properties:
      ServiceToken: !GetAtt "CleanupACMDNSValidationLambdaFunction.Arn"
      ACMArn: !Ref SslCertificate
      HostedZoneId: !Ref HostedZone

# 3. Define the Custom::SES_Domain's Lambda Function via a nested stack. 
  CfnSESResources:
    Type: AWS::CloudFormation::Stack
    Condition: EmailDomainRequested
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/aws-cfn-ses-domain/aws-cfn-ses-domain.cf.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        LambdaCodeS3Bucket: !Ref FunctionsBucketName
        LambdaCodeS3Key: !Sub '${QSS3KeyPrefix}functions/packages/CfnSesDomain/lambda.zip'

# 4. Declare a Custom::SES_Domain resource for your SES domain.
  SESDomain:
    Type: Custom::SES_Domain
    Condition: EmailDomainRequested
    Properties:
      # ServiceToken is the Arn of a Lambda Function from the nested stack:
      ServiceToken: !GetAtt CfnSESResources.Outputs.CustomDomainIdentityArn
      # Remaining Properties are options for provisioning for your SES domain identity:
      # (Domain is required; all others are optional and shown with their defaults)
      Domain: !Sub "${DomainName}."
      EnableSend: true
      EnableReceive: false
      MailFromSubdomain: "mail"
      TTL: "1800"
      CustomDMARC: '"v=DMARC1; p=none; pct=100; sp=none; aspf=r;"'
      Region: !Ref "AWS::Region"

# 5. Declare a Route 53 RecordSetGroup to manage SES's required DNS entries.
#    (This assumes you already have a Route 53 hosted zone for your domain;
#    if not, you'll also want an AWS::Route53::HostedZone resource for it.
#    Or if you don't use Route 53, see "Return Values" for other DNS options.)
  Route53RecordsForSES:
    Type: AWS::Route53::RecordSetGroup
    Condition: EmailDomainRequested
    Properties:
      HostedZoneId: !Ref HostedZone
      # The Route53RecordSets attribute specifies all DNS records needed:
      RecordSets: !GetAtt SESDomain.Route53RecordSets

# 6. SMTP Password and user
  SmtpGroup:
    Type: AWS::IAM::Group
    Condition: EmailDomainRequested
    Properties:
      Path: /quickstart/gitlab/
      Policies:
      - PolicyName: sesAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - ses:SendRawEmail
            Resource: !Sub "arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:identity/mail.${DomainName}"

  SmtpUser:
    Type: AWS::IAM::User
    Condition: EmailDomainRequested
    Properties:
      Path: /quickstart/gitlab/
      Groups: 
        - !Ref SmtpGroup

  SmtpKeys:
    Type: AWS::IAM::AccessKey
    Condition: EmailDomainRequested
    Properties:
      Status: Active
      UserName:
        Ref: SmtpUser

  SmtpPasswordGeneratorFunction:
    Type: AWS::Lambda::Function
    Condition: EmailDomainRequested
    Properties:
      Handler: handler.handler
      Runtime: python3.8
      Role: !GetAtt SmtpPasswordGeneratorRole.Arn
      Code:
        S3Bucket: !Ref FunctionsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/SmtpPasswordGenerator/lambda.zip'

  SmtpPasswordGeneratorRole:
    Type: AWS::IAM::Role
    Condition: EmailDomainRequested
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeLambdaExecutionRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        # (allows logging)
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  SmtpPasswordGenerator:
    Type: Custom::SMTPPassword
    Condition: EmailDomainRequested
    Properties:
      ServiceToken: !GetAtt SmtpPasswordGeneratorFunction.Arn
      Region: !Ref 'AWS::Region'
      Secret: !GetAtt SmtpKeys.SecretAccessKey

# PostgreSQL Password

  GLDBPasswordGenerator:
    Type: Custom::GitLabDBPassword
    Properties:
      ServiceToken: !GetAtt GeneralPasswordGenerator.Arn
      Region: !Ref 'AWS::Region'

# SSM Parameters    
  DomainNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/quickstart/gitlab/${EnvironmentName}/infra/domain-name'
      Value: !Ref DomainName

  HostedZoneNameParameter:
    Type: AWS::SSM::Parameter
    Condition: HostedZoneRequested
    Properties:
      Type: String
      Name: !Sub '/quickstart/gitlab/${EnvironmentName}/infra/hosted-zone-name'
      Value: !Sub "${DomainName}."

  HostedZoneIdParameter:
    Type: AWS::SSM::Parameter
    Condition: HostedZoneRequested
    Properties:
      Type: String
      Name: !Sub '/quickstart/gitlab/${EnvironmentName}/infra/hosted-zone-id'
      Value: !Ref HostedZone

  PrivateHostedZoneIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/quickstart/gitlab/${EnvironmentName}/infra/private-hosted-zone-id'
      Value: !Ref PrivateHostedZone

  CertificateArnParameter:
    Type: AWS::SSM::Parameter
    Condition: CertificateRequested
    Properties:
      Type: String
      Name: !Sub '/quickstart/gitlab/${EnvironmentName}/infra/certificate-arn'
      Value: !Ref SslCertificate

  SmtpCredentialsSecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: EmailDomainRequested
    Properties:
      Name: !Sub '/quickstart/gitlab/${EnvironmentName}/infra/smtp-credentials'
      Description: "GitLab SMTP credentials"
      SecretString: !Sub '{"username": "${SmtpKeys}", "password": "${SmtpPasswordGenerator.Password}"}'

  DatabasePassword:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '/quickstart/gitlab/${EnvironmentName}/secrets/gitlab-db-password'
      Description: "GitLab DB Password"
      SecretString: !GetAtt GLDBPasswordGenerator.OutputString

  GeneralPasswordGenerator:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Returns a password
      MemorySize: 256
      Runtime: python3.8
      Handler: index.handler
      Role: !GetAtt CFCustomResourceLambdaRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import cfnresponse
          import random
          import string
          import logging
          import signal

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          def handler(event, context):
              # Setup alarm for remaining runtime minus a second
              signal.alarm((int(context.get_remaining_time_in_millis() / 1000)) - 1)
              try:
                  LOGGER.info('REQUEST RECEIVED:\n %s', event)
                  LOGGER.info('REQUEST RECEIVED:\n %s', context)
                  if event['RequestType'] == 'Create':
                      LOGGER.info('CREATE!')
                      #From: https://pynative.com/python-generate-random-string/
                      # select 1 lowercase
                      password = random.choice(string.ascii_lowercase)
                      # select 1 uppercase
                      password += random.choice(string.ascii_uppercase)
                      # select 1 digit
                      password += random.choice(string.digits)
                      # select 1 special symbol
                      password += random.choice("!#$%&")
                      # generate other characters
                      for i in range(6):
                          password += random.choice(string.ascii_letters + string.digits + "!#$%&")
                      responseData = {'OutputString': password}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  elif event['RequestType'] == 'Delete':
                      LOGGER.info('DELETE!')
                      cfnresponse.send(event, context, "SUCCESS",
                                    {"Message": "Resource deletion successful!"})
              except: #pylint: disable=W0702
                  LOGGER.info('FAILED!')
                  cfnresponse.send(event, context, "FAILED", {
                      "Message": "Exception during processing"})

          def timeout_handler(_signal, _frame):
              '''Handle SIGALRM'''
              raise Exception('Time exceeded')

          signal.signal(signal.SIGALRM, timeout_handler)   

  CFCustomResourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "lambda-write-logs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"  
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*"

Outputs:
  DatabaseSecurityGroupID:
    Value: !GetAtt DatabaseSecurityGroup.GroupId
  PraefectSecurityGroupID:
    Value: !GetAtt PraefectSecurityGroup.GroupId
  SslCertificateArn:
    Condition: CertificateRequested
    Value: !Ref SslCertificate
  SmtpCredentialsSecretName:
    Condition: EmailDomainRequested
    Value: !Ref SmtpCredentialsSecret
  DatabaseSecretName:
    Value: !Ref DatabasePassword
  HostedZoneId:
    Condition: HostedZoneRequested
    Value: !Ref HostedZone
  PrivateHostedZoneId:
    Value: !Ref PrivateHostedZone